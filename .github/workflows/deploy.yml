name: Deploy to ArgoCD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KONECTY_KUBECONFIG }}" > $HOME/.kube/config

    - name: Install kubectl
      run: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd-linux-amd64
        sudo mv argocd-linux-amd64 /usr/local/bin/argocd

    - name: Install yq
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:rmescandon/yq
        sudo apt-get update
        sudo apt-get install -y yq

    - name: Port forward to Argo CD server
      run: |
        kubectl port-forward service/argocd-server 8080:80 -n argocd &
        sleep 5

    - name: Log in to ArgoCD
      run: |
        yes | argocd login localhost:8080 --username=${{ secrets.ARGO_LOGIN }} --password=${{ secrets.ARGO_PASSWORD }} --insecure

    - name: Read ArgoCD deploy template
      id: read-template
      run: |
        YAML_CONTENT=$(cat $GITHUB_WORKSPACE/deploy/argo_deploy_template.yaml)
        APP_NAME=$(echo "$YAML_CONTENT" | yq e '.name' -)
        REPO=$(echo "$YAML_CONTENT" | yq e '.repo' -)
        PATH=$(echo "$YAML_CONTENT" | yq e '.path' -)
        DEST_NAMESPACE=$(echo "$YAML_CONTENT" | yq e '.dest_namespace' -)
        DEST_SERVER=$(echo "$YAML_CONTENT" | yq e '.dest_server' -)
        PROJECT=$(echo "$YAML_CONTENT" | yq e '.project' -)
        GRPC_WEB=$(echo "$YAML_CONTENT" | yq e '.grpc_web' -)
        REVISION=$(echo "$YAML_CONTENT" | yq e '.revision' -)
        LABELS=$(echo "$YAML_CONTENT" | yq e '.labels[]' -)

        COMMAND="argocd app create $APP_NAME --repo $REPO --path $PATH --dest-namespace $DEST_NAMESPACE --dest-server $DEST_SERVER --project $PROJECT"
        if [ "$GRPC_WEB" = "true" ]; then
          COMMAND="$COMMAND --grpc-web"
        fi
        COMMAND="$COMMAND --revision $REVISION"
        for LABEL in $LABELS; do
          COMMAND="$COMMAND -l $LABEL"
        done

        echo "COMMAND=$COMMAND" >> $GITHUB_ENV

    - name: Create ArgoCD Application
      run: |
        $COMMAND
      env:
        COMMAND: ${{ env.COMMAND }}
